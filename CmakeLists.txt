# 指定CMake的最低版本
cmake_minimum_required(VERSION 3.28)

# 设置项目名称
project(SDK)

# 设置目标名称
set(TARGET_NAME SDK)

# 设置启动项目
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT SDK)

# 设置使用到的Qt模块 ------------------------------------------------------------------
set(QT_MODULES Core Gui Widgets)

# 查找 Qt 库（以 Qt5 为例）
find_package(Qt5 COMPONENTS ${QT_MODULES} REQUIRED)

# Qt，开启Qt代码自动生成
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

# 检测平台（x86 或 x64）
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(PLATFORM_CPU "x64")
else()
    set(PLATFORM_CPU "x86")
endif()
message(STATUS "PLATFORM_CPU: ${PLATFORM_CPU}")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/${PLATFORM_CPU})  # .lib文件
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/${PLATFORM_CPU})  # .dll文件
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/${PLATFORM_CPU})  # 运行时文件

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_BUILD_TYPE debug)

# 解决节数超过对象文件格式限制
add_compile_options(-bigobj)

# 添加VS过滤器
macro(source_group_by_dir source_files)
    if(MSVC)
        set(cur_dir ${CMAKE_CURRENT_SOURCE_DIR})
        foreach(file ${${source_files}})
            string(REGEX REPLACE ${cur_dir}/\(.*\) \\1 file_path ${file})
            string(REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${file_path})
            string(COMPARE EQUAL ${file_path} ${sgbd_group_name} nogroup)
            string(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
            get_filename_component(file_extension ${file} EXT)
            if(file_extension STREQUAL ".ui")                   # ui文件，放Form Files
                source_group("Form Files" FILES ${file})
            elseif(file_extension STREQUAL ".qrc")
                source_group("Resource Files" FILES ${file})    # qrc文件，放Resource Files
				elseif(file_extension STREQUAL ".ts")
                source_group("Language" FILES ${file})    # qrc文件，放Language
            elseif(NOT nogroup)
                source_group(${sgbd_group_name} FILES ${file})  # 使用所在子目录名作为过滤器名
            endif()
        endforeach(file)
    endif(MSVC)
endmacro(source_group_by_dir)

# 定义复制头文件的宏
macro(copy_headers_to_include source_dir dest_dir)
    file(GLOB_RECURSE HEADER_FILES 
        "${source_dir}/*.h"
        "${source_dir}/*.hpp"
        "${source_dir}/*.hxx"
        "${source_dir}/*.H"
    )
    foreach(HEADER ${HEADER_FILES})
        # 检查文件路径是否包含include目录
        string(FIND ${HEADER} "/include/" INCLUDE_POS)
        if(${INCLUDE_POS} EQUAL -1)
            # 获取相对路径
            file(RELATIVE_PATH REL_PATH ${source_dir} ${HEADER})
            # 获取目标目录
            get_filename_component(DEST_PATH ${dest_dir}/${REL_PATH} DIRECTORY)
            # 创建目标目录
            file(MAKE_DIRECTORY ${DEST_PATH})
            # 复制文件
            configure_file(${HEADER} ${dest_dir}/${REL_PATH} COPYONLY)
        endif()
    endforeach()
endmacro()

# 所有源文件
file(GLOB_RECURSE SRC_FILE "*.cpp" "*.cxx" "*.cc" "*.C" "*.c++" "*.h" "*.hpp" "*.H" "*.hxx" "*.ui" "*.qrc" "*.ts")

# 排除生成的moc、qrc和ui文件
foreach(file ${SRC_FILE})
    list(APPEND TARGET_SRC ${file})
endforeach(file ${SRC_FILE})
list(FILTER TARGET_SRC EXCLUDE REGEX "moc_|qrc_|ui_")
list(FILTER TARGET_SRC EXCLUDE REGEX "build/*")

# 添加VS过滤器
source_group_by_dir(TARGET_SRC)

# 添加可执行文件
add_library(${TARGET_NAME} SHARED ${TARGET_SRC})

# 包含目录
target_include_directories(${TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)

# 调用复制头文件的宏
copy_headers_to_include(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/include)

# 链接Qt库
target_link_libraries(${TARGET_NAME} PUBLIC
  Qt5::Core 
  Qt5::Gui
)

# 设置Boost库的根目录（应指向 Boost 的安装根目录）
set(BOOST_ROOT "D:/WorkSpace/boost_1_88_0")
 
# 禁用搜索系统路径
set(Boost_NO_SYSTEM_PATHS ON) # 非常重要，否则会导致找不到 Boost 库
 
# 查找Boost库，指定需要的组件
# find_package(Boost REQUIRED COMPONENTS filesystem regex)
set(SDKThirdPartylib "${CMAKE_SOURCE_DIR}/SDKThirdPartylib.txt")
file(STRINGS ${SDKThirdPartylib} LIBRARIES)
find_package(Boost REQUIRED COMPONENTS ${LIBRARIES})
if(Boost_FOUND)
    # 输出 Boost 的相关信息
    message("Boost version: ${Boost_VERSION}")
    message("Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
    message("Boost_LIBRARY_DIRS: ${Boost_LIBRARY_DIRS}")
 
    # 链接Boost库目录
    #link_directories(${Boost_LIBRARY_DIRS})
	
    target_include_directories(${TARGET_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
 
    target_link_libraries (${TARGET_NAME} PRIVATE ${Boost_LIBRARIES})
else()
    message(FATAL_ERROR "Boost not found!")
endif()