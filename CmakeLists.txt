# 指定CMake的最低版本
cmake_minimum_required(VERSION 3.10)

# 设置项目名称
project(SDK)

# 设置目标名称
set(TARGET_NAME SDK)

# 设置启动项目
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT SDK)

# 启用C++17
add_compile_options(-std=c++17)

# 解决节数超过对象文件格式限制
add_compile_options(-bigobj)

# 检测平台（x86 或 x64）
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(PLATFORM_CPU "x64")
else()
    set(PLATFORM_CPU "x86")
endif()
message(STATUS "PLATFORM_CPU: ${PLATFORM_CPU}")

# 设置输出路径
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${PLATFORM_CPU})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${PLATFORM_CPU})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${PLATFORM_CPU})

# 收集头文件（排除特定目录）
file(GLOB_RECURSE HEADER_FILES "*.h")
list(FILTER HEADER_FILES EXCLUDE REGEX "include/.*\\.h$")

# 收集源文件
aux_source_directory(. DIR_SRCS)
aux_source_directory(FileSystem DIR_SRCS)
aux_source_directory(JsonObject DIR_SRCS)
aux_source_directory(INIParseObject DIR_SRCS)

# 添加可执行文件
add_executable(${TARGET_NAME} ${HEADER_FILES} ${DIR_SRCS})

# 包含目录
target_include_directories(${TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)

# 添加子模块
add_subdirectory(FileSystem)
add_subdirectory(JsonObject)
add_subdirectory(INIParseObject)